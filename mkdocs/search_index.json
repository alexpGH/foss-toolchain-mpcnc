{
    "docs": [
        {
            "location": "/",
            "text": "A set of tutorials around foss\n1\n tools for the mpcnc\n2\n\n\n1) free and open source\n\n2) \nmostly printed cnc\n\n\nThe related discussion can be found in the \nforum\n \n\n\nWARNING\n\n\n\nI\u2019m no expert in all of this. Try at your own risk!\n\n\nThis is work in progress and will be extended bit by bit.\n\n\nOverview of tutorials\n\n\n\n\n\n\n\n\nNr.\n\n\nTitle\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n1\n\n\nFreecad part 1\n\n\nFrom \nzero\n \u2192 gcode; Get FreeCAD, design a pocket with island, export gcode\n\n\n\n\n\n\n2\n\n\nController board, firmware\n\n\nController board & firmware options\n\n\n\n\n\n\n3\n\n\nZOOM: controller & firmware option B) \n\n\ngrbl on ramps for dual end stop based auto squaring\n\n\n\n\n\n\n4\n\n\nbCnC\n\n\nGet, configure and get started with \nbCNC\n\n\n\n\n\n\n5\n\n\nMilling part 1\n\n\nMilling the part from tutorial 1\n\n\n\n\n\n\n6\n\n\nFreecad part 1+\n\n\nConfiguring to sensible settings, adding finish pass and holding tags\n\n\n\n\n\n\n\n\nMotivation\n\n\nI really like open source stuff, and I\u2019m quite impressed by \nRyan\n & folks. I have build my own mpcnc and want to contribute my part to the \nV1 universe\n.\n\n\nI think the open design & open source approach is quite powerful; I dislike to depend on closed source software which does not natively run on my favorite operating system (linux).\n\n\nI think paying license fee for CAM software is OK, because providing such a software is much work.\nFor me, I decided against it for several reasons.\n\n\nDue to the complexity of the matter for newcomers, default tools are typically not replaced by standard users. Although there are a bunch of people operating the mpcnc & related machines with foss, and great solutions out there (see the tutorials below touching some of them), it took me several hours of reading, testing and playing around to combine the various bits of information to a consistent solution for me.  \n\n\nTherefore I decided to provide an easy to follow, step by step guide to a foss toolchain for the mpcnc, with the aim to be applicable using linux, windows and macos.\nI hope you can follow all of this; if not, feel free to ask in the \nrelated thread\n.\n\n\nA bold \nthank you\n goes out to Ryan and all the other people (e.g. from FreeCAD, debian, grbl, bCNC) out there, for sharing their expertise with us!\n \n\n\nThe goal\n\n\nGet generated gbrl gcode \u2018from zero\u2019 using Freecad (get it, do the design, path generation, gcode export) for the shown geometry.\n\n\nIt has the features: pocket with island and finish allowance which I think shows most of the necassary basics. We will later add more complex stuff (see the to do list).",
            "title": "Home"
        },
        {
            "location": "/#a-set-of-tutorials-around-foss1-tools-for-the-mpcnc2",
            "text": "1) free and open source \n2)  mostly printed cnc  The related discussion can be found in the  forum    WARNING  \nI\u2019m no expert in all of this. Try at your own risk!  This is work in progress and will be extended bit by bit.",
            "title": "A set of tutorials around foss1 tools for the mpcnc2"
        },
        {
            "location": "/#overview-of-tutorials",
            "text": "Nr.  Title  Description      1  Freecad part 1  From  zero  \u2192 gcode; Get FreeCAD, design a pocket with island, export gcode    2  Controller board, firmware  Controller board & firmware options    3  ZOOM: controller & firmware option B)   grbl on ramps for dual end stop based auto squaring    4  bCnC  Get, configure and get started with  bCNC    5  Milling part 1  Milling the part from tutorial 1    6  Freecad part 1+  Configuring to sensible settings, adding finish pass and holding tags",
            "title": "Overview of tutorials"
        },
        {
            "location": "/#motivation",
            "text": "I really like open source stuff, and I\u2019m quite impressed by  Ryan  & folks. I have build my own mpcnc and want to contribute my part to the  V1 universe .  I think the open design & open source approach is quite powerful; I dislike to depend on closed source software which does not natively run on my favorite operating system (linux).  I think paying license fee for CAM software is OK, because providing such a software is much work.\nFor me, I decided against it for several reasons.  Due to the complexity of the matter for newcomers, default tools are typically not replaced by standard users. Although there are a bunch of people operating the mpcnc & related machines with foss, and great solutions out there (see the tutorials below touching some of them), it took me several hours of reading, testing and playing around to combine the various bits of information to a consistent solution for me.    Therefore I decided to provide an easy to follow, step by step guide to a foss toolchain for the mpcnc, with the aim to be applicable using linux, windows and macos.\nI hope you can follow all of this; if not, feel free to ask in the  related thread .  A bold  thank you  goes out to Ryan and all the other people (e.g. from FreeCAD, debian, grbl, bCNC) out there, for sharing their expertise with us!",
            "title": "Motivation"
        },
        {
            "location": "/#the-goal",
            "text": "Get generated gbrl gcode \u2018from zero\u2019 using Freecad (get it, do the design, path generation, gcode export) for the shown geometry.  It has the features: pocket with island and finish allowance which I think shows most of the necassary basics. We will later add more complex stuff (see the to do list).",
            "title": "The goal"
        },
        {
            "location": "/freecad_1/",
            "text": "Foreword\n\n\nNote: I use the blender interface for freecad (as I\u2019m using blender regularly). Just right-click in the main window and select navigation-style> blender (shown in the 2nd video).\n\n\nNote: After my initial tests with FreeCad, I opted for \nblender\n and the great \nblendercam\n for design and gCode generation for complex parts (like airfoils). See my \nmotivation\n.\n\n\n\n\n\n\n\n\nFunctionality\n\n\nShortcut\n\n\n\n\n\n\n\n\n\n\n3D rotation\n\n\nmiddle mouse botton + move the mouse\n\n\n\n\n\n\nMove the view\n\n\nshift + middel mouse button + move the mouse\n\n\n\n\n\n\nScale\n\n\nmouse wheel or ctrl + middle mouse button + move the mouse\n\n\n\n\n\n\n\n\n0. Getting Freecad\n\n\nFreecad provides appImages / binaries for Win / Mac / Linux. Just download and execute it. We will base this tutorial on the current stable release 0.18\n\n\n\n\n1. Getting started: prepare for body creation\n\n\nWe will open part design and create a sketch (which is a 2D drawing, allowing for constraints etc.) which will then be the basis for the 3D body\n\n\n\n\n2.  Sketching a square, using constraints, extrude to body\n\n\n\n\n3. Adapting the geometry\n\n\nHow to use the underlying sketch (the constraints therein) to adapt the body geometry. This illustrates a basic design feature I like in freecad: all the steps build on oneanother (its like filters / adaptors applied in sequence). You can adapt almost all of them later on an the result will be adapted.\n\n\n\n\n4. Making a pocket\n\n\nYou can easily match a sketch on a face of a 3d body, do some 2d design and use it as the basis of 3D body modification.\n\n\n\n\n5. Adding an island\n\n\n\n\n6. Configure the path workbench, create the pocketing operation\n\n\n\n\n7. Visualize and correct the finishing allowance\n\n\nIn the last video we generated the pocketing operation; checking the visualization we recognize that we had used the wrong sign for the finish allowance and correct it here\n\n\n\n\n8. Export gcode\n\n\n\n\nOpen points\n\n\n\n\ncheck if we could have holding tabs generated: thanks to @edwardvmills: holding tabs are called \u2018tags\u2019 and are available as a \u2018Dressup\u2019 on an operation. tutorial tbd.\n\n\nwe use 5mm in z. add a short video to show how to use a plunge angle and smaller milling depth per pass\n\n\n3d milling\n\n\n\n\n\nFeel free to dicuss your questions in the \nrelated discussion thread",
            "title": "Freecad part 1"
        },
        {
            "location": "/freecad_1/#foreword",
            "text": "Note: I use the blender interface for freecad (as I\u2019m using blender regularly). Just right-click in the main window and select navigation-style> blender (shown in the 2nd video).  Note: After my initial tests with FreeCad, I opted for  blender  and the great  blendercam  for design and gCode generation for complex parts (like airfoils). See my  motivation .     Functionality  Shortcut      3D rotation  middle mouse botton + move the mouse    Move the view  shift + middel mouse button + move the mouse    Scale  mouse wheel or ctrl + middle mouse button + move the mouse",
            "title": "Foreword"
        },
        {
            "location": "/freecad_1/#0-getting-freecad",
            "text": "Freecad provides appImages / binaries for Win / Mac / Linux. Just download and execute it. We will base this tutorial on the current stable release 0.18",
            "title": "0. Getting Freecad"
        },
        {
            "location": "/freecad_1/#1-getting-started-prepare-for-body-creation",
            "text": "We will open part design and create a sketch (which is a 2D drawing, allowing for constraints etc.) which will then be the basis for the 3D body",
            "title": "1. Getting started: prepare for body creation"
        },
        {
            "location": "/freecad_1/#2-sketching-a-square-using-constraints-extrude-to-body",
            "text": "",
            "title": "2.  Sketching a square, using constraints, extrude to body"
        },
        {
            "location": "/freecad_1/#3-adapting-the-geometry",
            "text": "How to use the underlying sketch (the constraints therein) to adapt the body geometry. This illustrates a basic design feature I like in freecad: all the steps build on oneanother (its like filters / adaptors applied in sequence). You can adapt almost all of them later on an the result will be adapted.",
            "title": "3. Adapting the geometry"
        },
        {
            "location": "/freecad_1/#4-making-a-pocket",
            "text": "You can easily match a sketch on a face of a 3d body, do some 2d design and use it as the basis of 3D body modification.",
            "title": "4. Making a pocket"
        },
        {
            "location": "/freecad_1/#5-adding-an-island",
            "text": "",
            "title": "5. Adding an island"
        },
        {
            "location": "/freecad_1/#6-configure-the-path-workbench-create-the-pocketing-operation",
            "text": "",
            "title": "6. Configure the path workbench, create the pocketing operation"
        },
        {
            "location": "/freecad_1/#7-visualize-and-correct-the-finishing-allowance",
            "text": "In the last video we generated the pocketing operation; checking the visualization we recognize that we had used the wrong sign for the finish allowance and correct it here",
            "title": "7. Visualize and correct the finishing allowance"
        },
        {
            "location": "/freecad_1/#8-export-gcode",
            "text": "",
            "title": "8. Export gcode"
        },
        {
            "location": "/freecad_1/#open-points",
            "text": "check if we could have holding tabs generated: thanks to @edwardvmills: holding tabs are called \u2018tags\u2019 and are available as a \u2018Dressup\u2019 on an operation. tutorial tbd.  we use 5mm in z. add a short video to show how to use a plunge angle and smaller milling depth per pass  3d milling   \nFeel free to dicuss your questions in the  related discussion thread",
            "title": "Open points"
        },
        {
            "location": "/firmware_1/",
            "text": "Controller & firmware options\n\n\nA, B, C are different options; choose the one you prefer \u2013 as always, at your own risk!\n\n\nA) Grbl on Ramps - default mpcnc (no dual end stops)\n\n\n(and possibly others\n*1\n)\n\n\nController & firmware\n\n\n*1) \nplease report about any other boards in use including a link to documentation\n\n\nWith the default mpcnc setup (non-dual end stop firmware & wiring) based on ramps, an approach is to use the \nrgbl ramps\n solution by \n@mschrock\n et.al.\n\n\nI followed the instructions there (downloaded the newest version from the \n1.Download this repository\n link pointing to the github of carlos. Compiled in arduino IDE (\nas usual - see the section flash firmware\n) and flashed. I could not test it as I have the dual end-stop setup and don\u2019t want to screw up my machine.\nI have read of people using it successfully. \nPerhaps someone could confirm this, then we could mark this here as confirmed.\n\n\nFront-end\n\n\nFor boards running gbrl \nbCnC\n is a great solution, as it runs on python and therefore should be available on many platforms.\n\n\nB) Grbl on Ramps \u2013 dual-end-stop, auto-squaring\n\n\nController & firmware\n\n\n@Pablo\n did great work \ndocumented here\n to get it up and running, based on \ngrbl-Mega-5X\n.\n\n\nOne or two end-stops per axis, NO or NC mode, all discussed in the linked thread!\nSee also the detailed tutorial \nZOOM on option B)\n.\n\n\nThe \n\u2018main\u2019 post\n with the download link to the current version.\n\n\nFront-end\n\n\nbCnC\n\n\nC) General solution Marlin-mpcnc post in FreeCad\n\n\nNot yet\n (I need to test it): provide an path: output: mpcnc-marlin option in FreeCad. Looks doable to me.\nIf you want to get this going, see and support \nthis\n\n\nTo be honest, I like this approach, as it would allow everybody to stick with the default firmware and his board.\n\n\nThere are some inputs on known issues and how these could be solved.\n\n\nG0, G1, G17, g18/g19 & g2/g3 issue\n\n\nJeffeb3's input\n\n\nAny hint about possible other problems or approaches how to get some confidence (e.g. which commands to crosscheck) highly appreciated.\n\n\n\n\nIf someone whants to jump in - please contact me\n\n\nController & firmware\n\n\nJust the controller you have. Possibly two firmware parameters to adapt (ARC_SUPPORT and CNC_WORKSPACE_PLANES).\n\n\nFront-end\n\n\nJust what you are using currently.\n\n\n\nFeel free to dicuss your questions in the \nrelated discussion thread",
            "title": "Controller board, firmware"
        },
        {
            "location": "/firmware_1/#controller-firmware-options",
            "text": "A, B, C are different options; choose the one you prefer \u2013 as always, at your own risk!",
            "title": "Controller &amp; firmware options"
        },
        {
            "location": "/firmware_1/#a-grbl-on-ramps-default-mpcnc-no-dual-end-stops",
            "text": "(and possibly others *1 )",
            "title": "A) Grbl on Ramps - default mpcnc (no dual end stops)"
        },
        {
            "location": "/firmware_1/#controller-firmware",
            "text": "*1)  please report about any other boards in use including a link to documentation  With the default mpcnc setup (non-dual end stop firmware & wiring) based on ramps, an approach is to use the  rgbl ramps  solution by  @mschrock  et.al.  I followed the instructions there (downloaded the newest version from the  1.Download this repository  link pointing to the github of carlos. Compiled in arduino IDE ( as usual - see the section flash firmware ) and flashed. I could not test it as I have the dual end-stop setup and don\u2019t want to screw up my machine.\nI have read of people using it successfully.  Perhaps someone could confirm this, then we could mark this here as confirmed.",
            "title": "Controller &amp; firmware"
        },
        {
            "location": "/firmware_1/#front-end",
            "text": "For boards running gbrl  bCnC  is a great solution, as it runs on python and therefore should be available on many platforms.",
            "title": "Front-end"
        },
        {
            "location": "/firmware_1/#b-grbl-on-ramps-dual-end-stop-auto-squaring",
            "text": "",
            "title": "B) Grbl on Ramps \u2013 dual-end-stop, auto-squaring"
        },
        {
            "location": "/firmware_1/#controller-firmware_1",
            "text": "@Pablo  did great work  documented here  to get it up and running, based on  grbl-Mega-5X .  One or two end-stops per axis, NO or NC mode, all discussed in the linked thread!\nSee also the detailed tutorial  ZOOM on option B) .  The  \u2018main\u2019 post  with the download link to the current version.",
            "title": "Controller &amp; firmware"
        },
        {
            "location": "/firmware_1/#front-end_1",
            "text": "bCnC",
            "title": "Front-end"
        },
        {
            "location": "/firmware_1/#c-general-solution-marlin-mpcnc-post-in-freecad",
            "text": "Not yet  (I need to test it): provide an path: output: mpcnc-marlin option in FreeCad. Looks doable to me.\nIf you want to get this going, see and support  this  To be honest, I like this approach, as it would allow everybody to stick with the default firmware and his board.  There are some inputs on known issues and how these could be solved.  G0, G1, G17, g18/g19 & g2/g3 issue  Jeffeb3's input  Any hint about possible other problems or approaches how to get some confidence (e.g. which commands to crosscheck) highly appreciated.   If someone whants to jump in - please contact me",
            "title": "C) General solution Marlin-mpcnc post in FreeCad"
        },
        {
            "location": "/firmware_1/#controller-firmware_2",
            "text": "Just the controller you have. Possibly two firmware parameters to adapt (ARC_SUPPORT and CNC_WORKSPACE_PLANES).",
            "title": "Controller &amp; firmware"
        },
        {
            "location": "/firmware_1/#front-end_2",
            "text": "Just what you are using currently.  \nFeel free to dicuss your questions in the  related discussion thread",
            "title": "Front-end"
        },
        {
            "location": "/zoom_1/",
            "text": "Spotlight on\n\n\nController & firmware option B):\ngrbl on Ramps \u2013 dual-end-stop, auto-squaring \ndetailed walk through\n\n\nStep1 \u2013 get the firmware\n\n\n\n\nEither download the rar file from Pablo \nhere\n or \nthis version from Johns gitHub\n.\n\n\nUnpack / browse into the downloaded stuff\n\n\n\n\nThe contents should look like this (except the \ngrblSettings_mpcncDualEndStop_bCNC.txt\n which is not in the Johns repo yet, but can be found \nin this repo\n ):\n\n\n\n\n\n\n\ndoc/images has the wiring description\n\n\nNothing to be changed\n with your wiring; just in case you wonder or want to add some extra stuff)\n\n\n\n\n\n\n\n\nStep2 - configure the firmware\n\n\ngrbl/config.h\n\n\n\nIn the folder \ngrbl\n open \nconfig.h\n \u2192 you should be able to configure everything in here. \nDo not mess around in e.g. limits.c as sometimes proposed as you will be loosing the possibility to easily follow main branch development.\n\n\nVery basics\n \n\n\ngrbl-mega-5x allows you to use 5 (or even 6) axis. We have the axis definitions in line 59ff.:\n\n\n\n\nPer axis, there's a definition of the bit (we'll need this later on to be used with the masks) and a name, e.g. line 59/60 for 'X' .\n\n\nFor our mpcnc gantry setup, we have 5 axis - originally named \nx, y, z, a, b\n in grbl-mx5. These have been renamed to \nx, y, z, x (cloned x, bit 4) , y (cloned y, bit 5)\n - I will refer to the latter two as xc and yc.\n\n\nEnd stop configuration - background\n \n\n\nGo to line 261.\n\n\nEnd stops in grbl defaults to normally open (NO). I think the reason is that you don't need to jumper the pins of the unused ports tied to gnd.\n\n\nThe mpcnc default for end stops however is (and I think this is sensible, \nsee Ryans arguments\n) normally closed (NC). This means using grbl as is, you'll get all end stops firing an alarm when \nNOT\n triggered.\n\n\nEnd stop configuration - $5 not working as intended \u21af\n\n\n\nWe normally would use grbl's configuration command  $5=1, which inverts ALL limit pins and could be adapted in the frontend, ess e.g. \nbCNC\n settings.\n\n\nUnfortunately this does \nNOT\n work (I tried it and alarms I could not get rid of).\n\n\nEnd stop configuration - solution: invert individual pins\n\n\n\nFortunately, there exists (in line 264) #define INVERT_MIN_LIMIT_PIN_MASK, which allows us to invert the necessary pins \nindividually\n:\n\n\nWe'll be using our knowledge about the AXIS_n definition we had learned about previously and set (\nNote: this is only necessary if you use your endstops in NC; for NO leave it commented out!\n)\n\n\n#define INVERT_MIN_LIMIT_PIN_MASK ((1<<AXIS_1) | (1<<AXIS_2) | (1<<AXIS_4) | (1<<AXIS_5))\n\n\n\n\nThis, by the way, also allows you to leave the unused pins (e.g. ZMIN, ZMAX in my case) open.\nUnfamiliar with bitmasks? Have a \nread\n.\n\n\nIf you are curious how it's applied, have a read in \nlimits.c\n line 192ff limits_get_state().\n\nAs already stated above: \nplease use config.h to tweak things and do not mess around in .c files whenever possible.\n\n\nStep3 \u2013 flash the firmware\n\n\nCopy the firmware to libraries\n\n- start Arduino IDE\n- at File>Preferences have a look at \nSketchbook location\n for me /home/alexp/Arduino\n\n\n- copy the complete folder grbl in there \nbelow\n the libraries folder\n\n\n\n\nClear EEPROM\n\n\n\nThis is necessary as grbl stores the settings in EEPROM and sometimes left over data might lead to problems.\nFlash the File>Examples>(all the way down in the menue)EEPROM>eeprom_clear\n\n\nThis is done as usual as described by \nRyan: how to flash firmware\n (open the example, compile and upload)\n\nFLashback\n: man, how easy is this - do you remeber the mess in ~year 2k when working with embedded devices from linux (\nmy tutorial back then in y2k\n)\n\n\nFlash grbl\n\n- in Arduion IDE: File>open> [whereYouHaveIt]/librarries/grbl/Examples/grblUpload.ino\n- compile\n- upload\n\n\nThats it.\nAfter power of/on for the controller board, you should now have a mpcnc with all motors active.\nGo on to the \nbCNC\n tutorial.\n\n\n\nFeel free to dicuss your questions in the \nrelated discussion thread",
            "title": "ZOOM grbl+RAMPS+auto squaring"
        },
        {
            "location": "/zoom_1/#spotlight-on",
            "text": "Controller & firmware option B): grbl on Ramps \u2013 dual-end-stop, auto-squaring  detailed walk through",
            "title": "Spotlight on"
        },
        {
            "location": "/zoom_1/#step1-get-the-firmware",
            "text": "Either download the rar file from Pablo  here  or  this version from Johns gitHub .  Unpack / browse into the downloaded stuff   The contents should look like this (except the  grblSettings_mpcncDualEndStop_bCNC.txt  which is not in the Johns repo yet, but can be found  in this repo  ):    doc/images has the wiring description  Nothing to be changed  with your wiring; just in case you wonder or want to add some extra stuff)",
            "title": "Step1 \u2013 get the firmware"
        },
        {
            "location": "/zoom_1/#step2-configure-the-firmware",
            "text": "grbl/config.h  \nIn the folder  grbl  open  config.h  \u2192 you should be able to configure everything in here.  Do not mess around in e.g. limits.c as sometimes proposed as you will be loosing the possibility to easily follow main branch development.  Very basics   \ngrbl-mega-5x allows you to use 5 (or even 6) axis. We have the axis definitions in line 59ff.:   Per axis, there's a definition of the bit (we'll need this later on to be used with the masks) and a name, e.g. line 59/60 for 'X' .  For our mpcnc gantry setup, we have 5 axis - originally named  x, y, z, a, b  in grbl-mx5. These have been renamed to  x, y, z, x (cloned x, bit 4) , y (cloned y, bit 5)  - I will refer to the latter two as xc and yc.  End stop configuration - background   \nGo to line 261.  End stops in grbl defaults to normally open (NO). I think the reason is that you don't need to jumper the pins of the unused ports tied to gnd.  The mpcnc default for end stops however is (and I think this is sensible,  see Ryans arguments ) normally closed (NC). This means using grbl as is, you'll get all end stops firing an alarm when  NOT  triggered.  End stop configuration - $5 not working as intended \u21af  \nWe normally would use grbl's configuration command  $5=1, which inverts ALL limit pins and could be adapted in the frontend, ess e.g.  bCNC  settings. \nUnfortunately this does  NOT  work (I tried it and alarms I could not get rid of).  End stop configuration - solution: invert individual pins  \nFortunately, there exists (in line 264) #define INVERT_MIN_LIMIT_PIN_MASK, which allows us to invert the necessary pins  individually :  We'll be using our knowledge about the AXIS_n definition we had learned about previously and set ( Note: this is only necessary if you use your endstops in NC; for NO leave it commented out! )  #define INVERT_MIN_LIMIT_PIN_MASK ((1<<AXIS_1) | (1<<AXIS_2) | (1<<AXIS_4) | (1<<AXIS_5))  This, by the way, also allows you to leave the unused pins (e.g. ZMIN, ZMAX in my case) open.\nUnfamiliar with bitmasks? Have a  read .  If you are curious how it's applied, have a read in  limits.c  line 192ff limits_get_state(). \nAs already stated above:  please use config.h to tweak things and do not mess around in .c files whenever possible.",
            "title": "Step2 - configure the firmware"
        },
        {
            "location": "/zoom_1/#step3-flash-the-firmware",
            "text": "Copy the firmware to libraries \n- start Arduino IDE\n- at File>Preferences have a look at  Sketchbook location  for me /home/alexp/Arduino \n- copy the complete folder grbl in there  below  the libraries folder   Clear EEPROM  \nThis is necessary as grbl stores the settings in EEPROM and sometimes left over data might lead to problems.\nFlash the File>Examples>(all the way down in the menue)EEPROM>eeprom_clear \nThis is done as usual as described by  Ryan: how to flash firmware  (open the example, compile and upload) FLashback : man, how easy is this - do you remeber the mess in ~year 2k when working with embedded devices from linux ( my tutorial back then in y2k )  Flash grbl \n- in Arduion IDE: File>open> [whereYouHaveIt]/librarries/grbl/Examples/grblUpload.ino\n- compile\n- upload  Thats it.\nAfter power of/on for the controller board, you should now have a mpcnc with all motors active.\nGo on to the  bCNC  tutorial.  \nFeel free to dicuss your questions in the  related discussion thread",
            "title": "Step3 \u2013 flash the firmware"
        },
        {
            "location": "/bcnc_1/",
            "text": "bCNC: control your machine\n\n\nbCnc\n - as the authors claim:\n\n\n\nGRBL CNC command sender, autoleveler, g-code editor, digitizer, CAM and \nswiss army knife\n for all your CNC needs.\n\nThis is not exaggeration -  and the bets is: due to being written in python, you can use it under every operating system supporting python!\n\n\nStep 1 - prepare\n\n\n\n\ninstall python on your system later connected to your controller (via usb)\n\n\ninstall the python packages \npython-tk\n, \npython-pip\n\n\ninstall bCNC using pip from your command line\n\n\n\n\n# on linux systems\napt-get install python python-tk python-pip\npip install bcnc\n\n\n\n\nOn windows follow \nthese instructions\n.\n\n\nStep 2 - connect your machine to bCNC\n\n\n\n\npower on your controller, connect via usb\n\n\non the command line\n\n\n\n\npython -m bCNC\n\n\n\n\n\n\nyou should see\n\n\n\n\n\nYour machine is not connected yet. Now:\n\n\nfill out \nPort\n (left, mid in the \nSerial\n section). This is just what you used to flash the firmware, in my case /dev/ttyUSB0\n\n\nyou can chekc \nconnect on startup if you like\n\n\nkeep \nController\n: GRBL1 for now (we will check this next)\n\n\nhit \nopen\n. You should now have:\n\n\n\n\n    \n\n\nyour machine is connected (the usb plug symbol is shaded in green)\n\n\nwe are in alarm state. This is intended as far as I have understood. You need to clear this state explicitly. It prevents you from mistakenly damage your machine while not being aware of what you are doing.\n\n\n\n\n\n\n\n\n\n\n\n\nStep 3 - check configuration basics\n\n\n\n\non the upper right click on \nTerminal\n\n\n\n\nin the left column below \nAlarm\n there is now the \nCommand\n input (right at the bottom).\n\n\nin the the mid you see the output of grbl (the result of your commands)\n\n\n\n\n\n\ngrbl starts with reporting the current version of firmware running on your controller - in my case \nGrbl1.1i\n - so no need to change the controller version field in the 'Serial' pane.\n\n\n\n\nONLY if you are running on **an older version** e.g. grbl 0.9x:\n        - hit File on the topmost menue\n        - re-click the usb adapter symbol to diconnect\n        - select a matching controller version\n        - reconnect\nPlease check the follwoing configuration carfully and adapt accordingly!\n\n\n\n\n\n\nthe greeting message also tells us how to unlock the machine:\n\n\n$X to unlock\n - don't do it now!\n\n\non the command promt enter \n$$\n, hit enter:\n\n\nin the output pane, we now have all the settings stored on your controller in the EEPROM (persitent for power off/on)\n\n\n\n\nStep 4 - detailed configuration \u2192 $x=what_you_need\n\n\nPreamble\n\n\nWe are focusing here on the gantry setup having dual motors per axis x (x & xc) and y (y & yc) - \ndon't remember? check again here\n.\n\nDefault grbl uses only 3 axis and bCNC in his machine settings interface supports only 3 axis \u2192\nignore CAM>config\n. \n\n\nUse the command line\n or \nCAM>controller\n interface to configure your machine settings.\n\n\nThis is the working configuration (\navailable on on my git hub\n) we will work through in the following.\n\n\nTo copy a setting to your machine - just copy & paste to the command promt line by line.\n\n\nWARNING:\nalthough grbl stores the settings in the EEPROM and should apply them immediately,\nI sometimes needed to power off/on the controller for the (correctly reported\nsettings - check by $$) have been effective! \n\n\n\n\n\nWe will go through the most important settings in the following. All settings not explicitly discussed can just be copied over. Have a read in \nthe grbl docu\n for detailed information.\n\n\nStep direction - $3\n\n\n$3=val where val encodes which axis to be inverted. See the following table how to calculate val.\n\nI have the default mpcnc wiring.\n\nSurprisingly, I ended up (4th row) with a quite different setting from what would be expected (3rd row).\n\n\n|:-------------|:-------------:-------------:-------------:-------------\n|\nvalue contribution\n|2\u2074=16|2\u00b3=8|2\u00b2=4|2\u00b9=2|2\u2070=1|\n|\naxis\n|yc|xc|z|y|x|\n|\nwhat we would expect\n=24|1|1|0|0|0|\n|\nwhat I endded up with\n=21|1|0|1|0|1|\n\n\nSo how can we safely determine that?:\n- on the to menue, select \nControl\n\n- use $$ to check that you have $5=0; if not issue $5=0\n- in the command prompt enter $X (clears the alarm and should unlock the machine\u2192Idle)\n\nIf you can't achieve the Idle state, you most probably have an\nend stop related alarm, e.g. [xyzxy], which means you misconfigured\nyour pins \u2192\nrecheck your understanding & config\n \n- set the stepwidth to a small value (as indicated by the red mark)\n\n\n\n\n\n\nset all axis to not inverted: issue $3=0\n\n\nfor all axis (one after the other):\n\n\nmake a small step\n\n\nnote which part of the axis moves opposite to what you want\n\n\nplace a 1 in the related column of the table shown above, add up and set $3=newSum until the axis moves as you expect\n\n\n\n\n\n\nwhen done, your machine should move as you expect (regarding the directions)  \n\n\n\n\nWorking area - $130ff\n\n\nMy mpcnc's working area is 911x571x125(x,y,z)mm, so I use these settings:\n\n\n$130=911.000 (x max travel, mm)\n$131=571.000 (y max travel, mm)\n$132=125.000 (z max travel, mm)\n$133=911.000 (xcloned max travel, mm)\n$134=571.000 (ycloned max travel, mm)\n\n\n\n\nMake sure to have symmetric settings for x/xc and y/yc!\n\n\nAre you wondering why I use 911 and 571 instead of 910 and 570?\n\nThis is because the homing debounce distance (which we'll set to 1mm) will be subtracted from these values and I'd like to see the 910 and 570 in the displays later on.\n\n\nAcceleration - $120ff\n\n\nI have a large build and a heavy spindle (dont't follow my example in this regard except you know what you are doing!). I therefore prefer quite low acceleration on x and y: \n\n\n$120=50.000 (x accel, mm/sec^2)\n$121=50.000 (y accel, mm/sec^2)\n$122=50.000 (z accel, mm/sec^2)\n$123=50.000 (xcloned accel, mm/sec^2)\n$124=50.000 (ycloned accel, mm/sec^2)\n\n\n\n\nStart from these values. You might be able to increase them by a factor of 4 (test it carefully). Remember to have x/xc and y/yc exactly symmetric!\n\n\nMax rate - $110ff\n\n\nNot much to say here. Keep x/xc and y/yc symmetric\n\n\n$110=4500.000 (x max rate, mm/min)\n$111=4500.000 (y max rate, mm/min)\n$112=800.000 (z max rate, mm/min)\n$113=4500.000 (xcloned max rate, mm/min)\n$114=4500.000 (ycloned max rate, mm/min)\n\n\n\n\nSteps/mm  - $100ff\n\n\nNote: Pablo published quite different settings here. I have the exact setup of the default mpcnc with the lead screw on Z and the T16 timing belts. And came up with these:\n\n\n$100=200.000 (x, step/mm)\n$101=200.000 (y, step/mm)\n$102=800.000 (z, step/mm)\n$103=200.000 (xcloned, step/mm)\n$104=200.000 (ycloned, step/mm)\n\n\n\n\n\n\nto check these, I insert a needle the 1mm clamp of the spindle, put a metal tape measure along one axis (e.g. x), position the neddle at axis_min, travel a specific length and check what the actual travel lenght was.\n\n\nrecalculate the steps/mm from this\n\n\npower on/off the board; I sometimes had issues not doing this especially for these settings\n\n\n\n\nHoming - $23 ff\n\n\nIf you made it this far, your machine moves the desired distances in the right directions.\n\n\n$23 is the homing dir invert; i have $23=31 which means all axes inverted \n\n\n|:-------------|:-------------:-------------:-------------:-------------\n|\nvalue contribution\n|2\u2074=16|2\u00b3=8|2\u00b2=4|2\u00b9=2|2\u2070=1|\n|\naxis\n|yc|xc|z|y|x|\n|\ndefaultmpcnc\n=31|1|1|1|1|1|\n\n\nand puts home to the lower left of your machine - that's the mpcnc standard.\n\n\nNote: the machine should home x and y axis, and leave z as it is.\nThis behaviour can be configured in config.h l.153 and 154 if\nyou'd like to change it. You need to recompile / flash in case you changed it.\n\n\n\n\nNext:\n- trigger each end stop manually and see if it gets displayed as intended (I triggered the x end stop for the following screenshot - note the \nIdle [x]\n status, not triggering the end stop, the [x] should disappear again)\n\n\n\n\n\n\n\n\nwhen all end stops act as intended:\n\n\n\n\nhands on the emergency off\n\n\nenter $H to start the homing sequence\n\n\nif anything is not as intended, emergency stop the machine\n\n\n\n\n\n\n\n\nif everything went well, the homing procedure places the machine at the configured homing pull of distance away from the endstops ($27=1.000 mm)\n\nThe lower left position in grbl as with professional cnc machines, is always negative working area distance; in my case:\n\n-901/-570\n\n\n\n\n\n\n\n\nThat's it!\n\n\nI suggest you learn about \nG54 - G59\n if you don't already know whats that.\n\nAnd get familiar with sending gcode files to your machine.\n\nHave fun!\n\n\n\nFeel free to dicuss your questions in the \nrelated discussion thread",
            "title": "bCNC"
        },
        {
            "location": "/bcnc_1/#bcnc-control-your-machine",
            "text": "bCnc  - as the authors claim:  GRBL CNC command sender, autoleveler, g-code editor, digitizer, CAM and  swiss army knife  for all your CNC needs. \nThis is not exaggeration -  and the bets is: due to being written in python, you can use it under every operating system supporting python!",
            "title": "bCNC: control your machine"
        },
        {
            "location": "/bcnc_1/#step-1-prepare",
            "text": "install python on your system later connected to your controller (via usb)  install the python packages  python-tk ,  python-pip  install bCNC using pip from your command line   # on linux systems\napt-get install python python-tk python-pip\npip install bcnc  On windows follow  these instructions .",
            "title": "Step 1 - prepare"
        },
        {
            "location": "/bcnc_1/#step-2-connect-your-machine-to-bcnc",
            "text": "power on your controller, connect via usb  on the command line   python -m bCNC   you should see   \nYour machine is not connected yet. Now:  fill out  Port  (left, mid in the  Serial  section). This is just what you used to flash the firmware, in my case /dev/ttyUSB0  you can chekc  connect on startup if you like  keep  Controller : GRBL1 for now (we will check this next)  hit  open . You should now have:         your machine is connected (the usb plug symbol is shaded in green)  we are in alarm state. This is intended as far as I have understood. You need to clear this state explicitly. It prevents you from mistakenly damage your machine while not being aware of what you are doing.",
            "title": "Step 2 - connect your machine to bCNC"
        },
        {
            "location": "/bcnc_1/#step-3-check-configuration-basics",
            "text": "on the upper right click on  Terminal   in the left column below  Alarm  there is now the  Command  input (right at the bottom).  in the the mid you see the output of grbl (the result of your commands)    grbl starts with reporting the current version of firmware running on your controller - in my case  Grbl1.1i  - so no need to change the controller version field in the 'Serial' pane.   ONLY if you are running on **an older version** e.g. grbl 0.9x:\n        - hit File on the topmost menue\n        - re-click the usb adapter symbol to diconnect\n        - select a matching controller version\n        - reconnect\nPlease check the follwoing configuration carfully and adapt accordingly!   the greeting message also tells us how to unlock the machine:  $X to unlock  - don't do it now!  on the command promt enter  $$ , hit enter: \nin the output pane, we now have all the settings stored on your controller in the EEPROM (persitent for power off/on)",
            "title": "Step 3 - check configuration basics"
        },
        {
            "location": "/bcnc_1/#step-4-detailed-configuration-xwhat_you_need",
            "text": "",
            "title": "Step 4 - detailed configuration &#8594; $x=what_you_need"
        },
        {
            "location": "/bcnc_1/#preamble",
            "text": "We are focusing here on the gantry setup having dual motors per axis x (x & xc) and y (y & yc) -  don't remember? check again here . \nDefault grbl uses only 3 axis and bCNC in his machine settings interface supports only 3 axis \u2192 ignore CAM>config .   Use the command line  or  CAM>controller  interface to configure your machine settings.  This is the working configuration ( available on on my git hub ) we will work through in the following. \nTo copy a setting to your machine - just copy & paste to the command promt line by line.  WARNING:\nalthough grbl stores the settings in the EEPROM and should apply them immediately,\nI sometimes needed to power off/on the controller for the (correctly reported\nsettings - check by $$) have been effective!   \nWe will go through the most important settings in the following. All settings not explicitly discussed can just be copied over. Have a read in  the grbl docu  for detailed information.",
            "title": "Preamble"
        },
        {
            "location": "/bcnc_1/#step-direction-3",
            "text": "$3=val where val encodes which axis to be inverted. See the following table how to calculate val. \nI have the default mpcnc wiring. \nSurprisingly, I ended up (4th row) with a quite different setting from what would be expected (3rd row).  |:-------------|:-------------:-------------:-------------:-------------\n| value contribution |2\u2074=16|2\u00b3=8|2\u00b2=4|2\u00b9=2|2\u2070=1|\n| axis |yc|xc|z|y|x|\n| what we would expect =24|1|1|0|0|0|\n| what I endded up with =21|1|0|1|0|1|  So how can we safely determine that?:\n- on the to menue, select  Control \n- use $$ to check that you have $5=0; if not issue $5=0\n- in the command prompt enter $X (clears the alarm and should unlock the machine\u2192Idle) \nIf you can't achieve the Idle state, you most probably have an\nend stop related alarm, e.g. [xyzxy], which means you misconfigured\nyour pins \u2192 recheck your understanding & config  \n- set the stepwidth to a small value (as indicated by the red mark)    set all axis to not inverted: issue $3=0  for all axis (one after the other):  make a small step  note which part of the axis moves opposite to what you want  place a 1 in the related column of the table shown above, add up and set $3=newSum until the axis moves as you expect    when done, your machine should move as you expect (regarding the directions)",
            "title": "Step direction - $3"
        },
        {
            "location": "/bcnc_1/#working-area-130ff",
            "text": "My mpcnc's working area is 911x571x125(x,y,z)mm, so I use these settings:  $130=911.000 (x max travel, mm)\n$131=571.000 (y max travel, mm)\n$132=125.000 (z max travel, mm)\n$133=911.000 (xcloned max travel, mm)\n$134=571.000 (ycloned max travel, mm)  Make sure to have symmetric settings for x/xc and y/yc!  Are you wondering why I use 911 and 571 instead of 910 and 570? \nThis is because the homing debounce distance (which we'll set to 1mm) will be subtracted from these values and I'd like to see the 910 and 570 in the displays later on.",
            "title": "Working area - $130ff"
        },
        {
            "location": "/bcnc_1/#acceleration-120ff",
            "text": "I have a large build and a heavy spindle (dont't follow my example in this regard except you know what you are doing!). I therefore prefer quite low acceleration on x and y:   $120=50.000 (x accel, mm/sec^2)\n$121=50.000 (y accel, mm/sec^2)\n$122=50.000 (z accel, mm/sec^2)\n$123=50.000 (xcloned accel, mm/sec^2)\n$124=50.000 (ycloned accel, mm/sec^2)  Start from these values. You might be able to increase them by a factor of 4 (test it carefully). Remember to have x/xc and y/yc exactly symmetric!",
            "title": "Acceleration - $120ff"
        },
        {
            "location": "/bcnc_1/#max-rate-110ff",
            "text": "Not much to say here. Keep x/xc and y/yc symmetric  $110=4500.000 (x max rate, mm/min)\n$111=4500.000 (y max rate, mm/min)\n$112=800.000 (z max rate, mm/min)\n$113=4500.000 (xcloned max rate, mm/min)\n$114=4500.000 (ycloned max rate, mm/min)",
            "title": "Max rate - $110ff"
        },
        {
            "location": "/bcnc_1/#stepsmm-100ff",
            "text": "Note: Pablo published quite different settings here. I have the exact setup of the default mpcnc with the lead screw on Z and the T16 timing belts. And came up with these:  $100=200.000 (x, step/mm)\n$101=200.000 (y, step/mm)\n$102=800.000 (z, step/mm)\n$103=200.000 (xcloned, step/mm)\n$104=200.000 (ycloned, step/mm)   to check these, I insert a needle the 1mm clamp of the spindle, put a metal tape measure along one axis (e.g. x), position the neddle at axis_min, travel a specific length and check what the actual travel lenght was.  recalculate the steps/mm from this  power on/off the board; I sometimes had issues not doing this especially for these settings",
            "title": "Steps/mm  - $100ff"
        },
        {
            "location": "/bcnc_1/#homing-23-ff",
            "text": "If you made it this far, your machine moves the desired distances in the right directions.  $23 is the homing dir invert; i have $23=31 which means all axes inverted   |:-------------|:-------------:-------------:-------------:-------------\n| value contribution |2\u2074=16|2\u00b3=8|2\u00b2=4|2\u00b9=2|2\u2070=1|\n| axis |yc|xc|z|y|x|\n| defaultmpcnc =31|1|1|1|1|1|  and puts home to the lower left of your machine - that's the mpcnc standard.  Note: the machine should home x and y axis, and leave z as it is.\nThis behaviour can be configured in config.h l.153 and 154 if\nyou'd like to change it. You need to recompile / flash in case you changed it.  Next:\n- trigger each end stop manually and see if it gets displayed as intended (I triggered the x end stop for the following screenshot - note the  Idle [x]  status, not triggering the end stop, the [x] should disappear again)     when all end stops act as intended:   hands on the emergency off  enter $H to start the homing sequence  if anything is not as intended, emergency stop the machine     if everything went well, the homing procedure places the machine at the configured homing pull of distance away from the endstops ($27=1.000 mm) \nThe lower left position in grbl as with professional cnc machines, is always negative working area distance; in my case: \n-901/-570     That's it!  I suggest you learn about  G54 - G59  if you don't already know whats that. \nAnd get familiar with sending gcode files to your machine. \nHave fun!  \nFeel free to dicuss your questions in the  related discussion thread",
            "title": "Homing - $23 ff"
        },
        {
            "location": "/mill_1/",
            "text": "Import the gcode\n\n\n\n\nFile>Open the gcode exported in tutorial 1 in bCNC\n\n\nIn the control tab, you can select the desired view (e.g. x-y and y-z) as shown in the following pictures\n\n\n\n\n\n\nThe red circle / triagle indicates the position of the machine relative to the workspace position (WPos).\n\n\nNote that, different from estlcam 2D default, the origin of the path is below the part (as can be seen in the y-z view). Have a look in the gcode to see that we work from positive coordinates down:\n- clearance plane at z=+25\n- workpiece top z=+20 (freecad's start depth)\n- working down to z=+15 (freecad's final depth)\n\n\nAttentive observes will realize in the images and video, that I accidently\nused z=+25 (which is the clearence height) instead of z=+20mm, the actual start\nheight for my milling operation. The follwoing description describes the correct setting.\n\n\n\n\nHave a look at the depth settings of the job in FreeCAD, especially \nClearence height\n, \nStart Depth\n and \nFinal Depth\n to crosscheck the correct settings. \n\n\n\n\nPosition your machine:\n\n\n\n\nMove your machine and place it relative to the workpiece where you want to have your x/y zero.\n\n\nHit xy=0 in the control window\n you should now have the red circle in x-y view right on the origin of the path:\n\n\n\n\n\nPosition the milling cutter right on top of the workpiece. This is the \nStart Depth\n - in our case z=+20mm \n\n\nUse g92 z 20 to set the machine position accordingly (and not +25 as I did).\n\n\nMove up in Z, power on the spindle\n\n\nHit \nStart\n in the control pane.\n\n\n\n\nThe nice thing about grbl is that you can interrupt any command and the machine will (mostly) react instantly - even when e.g. making a long move. Just hit \nPause\n or \nStop\n. This is different from Marlin, where you only can pause or stop \nafter\n the execution of the current command.\n\n\nUse the feed slider to slow down or speed up the milling procedure. I applied a speed-up as we used the MDF settings for the milling operation but are milling XPS.\n\n\nPossible pitfall - why did I use the wrong z position?\n\n\nHave a look at the y-z view (the first image). I wrongly interpreted the topmost plane of the path as start depth, which is \nwrong\n. The path is actually up to clearence plane (z=+25), over to the start position (in x-y) for plunging, fast down to to \nstart depth\n.\nSo be carefule in interpretation of what you see.\n\n\nMachine at work\n\n\n\n\nOpen points\n\n\n\n\nAdd some holding tags\n\n\nRamp or hlical plunge\n\n\nStep down in smaller amounts\n\n\n\n\n\nFeel free to dicuss your questions in the \nrelated discussion thread",
            "title": "Milling part 1"
        },
        {
            "location": "/mill_1/#import-the-gcode",
            "text": "File>Open the gcode exported in tutorial 1 in bCNC  In the control tab, you can select the desired view (e.g. x-y and y-z) as shown in the following pictures    The red circle / triagle indicates the position of the machine relative to the workspace position (WPos).  Note that, different from estlcam 2D default, the origin of the path is below the part (as can be seen in the y-z view). Have a look in the gcode to see that we work from positive coordinates down:\n- clearance plane at z=+25\n- workpiece top z=+20 (freecad's start depth)\n- working down to z=+15 (freecad's final depth)  Attentive observes will realize in the images and video, that I accidently\nused z=+25 (which is the clearence height) instead of z=+20mm, the actual start\nheight for my milling operation. The follwoing description describes the correct setting.  Have a look at the depth settings of the job in FreeCAD, especially  Clearence height ,  Start Depth  and  Final Depth  to crosscheck the correct settings.",
            "title": "Import the gcode"
        },
        {
            "location": "/mill_1/#position-your-machine",
            "text": "Move your machine and place it relative to the workpiece where you want to have your x/y zero.  Hit xy=0 in the control window  you should now have the red circle in x-y view right on the origin of the path:   Position the milling cutter right on top of the workpiece. This is the  Start Depth  - in our case z=+20mm   Use g92 z 20 to set the machine position accordingly (and not +25 as I did).  Move up in Z, power on the spindle  Hit  Start  in the control pane.   The nice thing about grbl is that you can interrupt any command and the machine will (mostly) react instantly - even when e.g. making a long move. Just hit  Pause  or  Stop . This is different from Marlin, where you only can pause or stop  after  the execution of the current command.  Use the feed slider to slow down or speed up the milling procedure. I applied a speed-up as we used the MDF settings for the milling operation but are milling XPS.",
            "title": "Position your machine:"
        },
        {
            "location": "/mill_1/#possible-pitfall-why-did-i-use-the-wrong-z-position",
            "text": "Have a look at the y-z view (the first image). I wrongly interpreted the topmost plane of the path as start depth, which is  wrong . The path is actually up to clearence plane (z=+25), over to the start position (in x-y) for plunging, fast down to to  start depth .\nSo be carefule in interpretation of what you see.",
            "title": "Possible pitfall - why did I use the wrong z position?"
        },
        {
            "location": "/mill_1/#machine-at-work",
            "text": "",
            "title": "Machine at work"
        },
        {
            "location": "/mill_1/#open-points",
            "text": "Add some holding tags  Ramp or hlical plunge  Step down in smaller amounts   \nFeel free to dicuss your questions in the  related discussion thread",
            "title": "Open points"
        },
        {
            "location": "/ext_1/",
            "text": "Sensible settings & ramp in dressup\n\n\nWe'll do the following:\n\n\n\n\nuse a higher feed (as we are milling xps)\n\n\nuse a step over of 25% of tool diameter\n\n\nadapt the step down 2.5mm to get the full depth at 2 passes (actually not necessary for xps\n\n\nadd a path \ndressup\n which adds a ramp to the plunging into the material\n\n\n\n\n\n\nFinishing passes & holding tags\n\n\nWe'll do the following:\n\n\n\n\nadd a finishing pass to the pocket inner contour, based on the edges\n\n\nadd a finishing pass to the island contour based on the face\n\n\nadd a holding tag dressup to the island countour pass\n\n\n\n\nFor the passes I use climb milling (setting \nccw\n).\n\nWhy? See my milling precision experiments discussed \nhere\n and \nhere\n.\n\n\n\n\nSliptonic has great Freecad videos. \nRegarding holding tag dressup\n.\n\n\nWe did not cover how to set the starting point for the path. I f you need it, have a look at sliponics \nvideo\n\n\n\nFeel free to dicuss your questions in the \nrelated discussion thread",
            "title": "Freecad - ramp in, finsish pass, holding tags"
        },
        {
            "location": "/ext_1/#sensible-settings-ramp-in-dressup",
            "text": "We'll do the following:   use a higher feed (as we are milling xps)  use a step over of 25% of tool diameter  adapt the step down 2.5mm to get the full depth at 2 passes (actually not necessary for xps  add a path  dressup  which adds a ramp to the plunging into the material",
            "title": "Sensible settings &amp; ramp in dressup"
        },
        {
            "location": "/ext_1/#finishing-passes-holding-tags",
            "text": "We'll do the following:   add a finishing pass to the pocket inner contour, based on the edges  add a finishing pass to the island contour based on the face  add a holding tag dressup to the island countour pass   For the passes I use climb milling (setting  ccw ). \nWhy? See my milling precision experiments discussed  here  and  here .   Sliptonic has great Freecad videos.  Regarding holding tag dressup .  We did not cover how to set the starting point for the path. I f you need it, have a look at sliponics  video  \nFeel free to dicuss your questions in the  related discussion thread",
            "title": "Finishing passes &amp; holding tags"
        },
        {
            "location": "/freecad_2/",
            "text": "Install opencamlib\n\n\nNote: After my initial tests with FreeCad, I opted for \nblender\n and the great \nblendercam\n for design and gCode generation for complex parts (like airfoils). See my \nmotivation\n.\n\n\nGet it \nhere\n and build it. Simple cmake build.\n\nOn my linux system, after installation even after checking that everything is installen in \n/usr/local/lib\n and executing \nldconfig /usr/local/lib\n for Freecad to find in () I got\n\n\nOpenCamLib is not working!\n\n\n\nwhen starting Freecad and the path workbench.\n\n\nThe second option is to copy the compiled librarie(s) in the macro folder.\nFind out the macro path in freecad preferences.\n\n\n\n\nand copy\n\n\n\nFeel free to dicuss your questions in the \nrelated discussion thread",
            "title": "Freecad - prepare for 3D"
        },
        {
            "location": "/freecad_2/#install-opencamlib",
            "text": "Note: After my initial tests with FreeCad, I opted for  blender  and the great  blendercam  for design and gCode generation for complex parts (like airfoils). See my  motivation .  Get it  here  and build it. Simple cmake build. On my linux system, after installation even after checking that everything is installen in  /usr/local/lib  and executing  ldconfig /usr/local/lib  for Freecad to find in () I got  OpenCamLib is not working!  when starting Freecad and the path workbench.  The second option is to copy the compiled librarie(s) in the macro folder.\nFind out the macro path in freecad preferences.   and copy  \nFeel free to dicuss your questions in the  related discussion thread",
            "title": "Install opencamlib"
        },
        {
            "location": "/blenderMot/",
            "text": "Motivation for using Blender\n\n\nAfter my initial tests with FreeCad, I opted for \nblender\n and the great \nblendercam\n for design and gCode generation for complex parts (like airfoils).\n\n\nThe main reason is that I usually build 3d sphapes like surfboards, airfoils and wings for hydrofoils, which I construct script based. Blender is great for this. I might add some more details about my approach in this section.\n\n\n\n\nSome examples:\n\n\nThe following 3 pictures show 1/4 of a SUP board foam core with heavily milled-away foam in the inner. The holes go 'down' to 10mm distnace from the surface.\n\n\n\n\n\n\n\n\n\nThe follwoing picture shows 1/2 of an airfoil including the calculated milling path for coarse milling.",
            "title": "Motivation"
        },
        {
            "location": "/blenderMot/#motivation-for-using-blender",
            "text": "After my initial tests with FreeCad, I opted for  blender  and the great  blendercam  for design and gCode generation for complex parts (like airfoils).  The main reason is that I usually build 3d sphapes like surfboards, airfoils and wings for hydrofoils, which I construct script based. Blender is great for this. I might add some more details about my approach in this section.   Some examples:  The following 3 pictures show 1/4 of a SUP board foam core with heavily milled-away foam in the inner. The holes go 'down' to 10mm distnace from the surface.     \nThe follwoing picture shows 1/2 of an airfoil including the calculated milling path for coarse milling.",
            "title": "Motivation for using Blender"
        },
        {
            "location": "/blenderInst/",
            "text": "Installation\n\n\nBlender\n\n\nI currently use \nblender\n's long term support version 2.83.9 (on linux) spcifically the tgz download, unpack and therein start blender. This allows me to use different versions in parallel (just in case).\n\n\nBlenderCam\n\n\nIn order to be able to use \nblendercam\n follow the \ndocumentation\n.\nI might later on add some notes here, but for now concentrate on the scripting part for wing design.",
            "title": "Installation"
        },
        {
            "location": "/blenderInst/#installation",
            "text": "",
            "title": "Installation"
        },
        {
            "location": "/blenderInst/#blender",
            "text": "I currently use  blender 's long term support version 2.83.9 (on linux) spcifically the tgz download, unpack and therein start blender. This allows me to use different versions in parallel (just in case).",
            "title": "Blender"
        },
        {
            "location": "/blenderInst/#blendercam",
            "text": "In order to be able to use  blendercam  follow the  documentation .\nI might later on add some notes here, but for now concentrate on the scripting part for wing design.",
            "title": "BlenderCam"
        },
        {
            "location": "/blenderAirfoils/",
            "text": "Why script based modelling\n\n\nI like script based, parametric modelling, because I can 'replay' complex design sequences with adapted parameters.\n\n\nExamples are my kite-hydrofoil and SUP hydrofoil front and rear wings, which follow the same design approach, with the rear wing being a smaller version of the front wing and the SUP/Wave front wing (I call it \nmonster\n) having a 3 x chordlength.\n\n\nKite-foil\n\n\n\n\n\n\nSup/Wave foil \nmonster\n wing\n\n\nWonder why it look that way? Pretty easy: I use it with kite and with my SUP (withe paddle) in waves.\nWhen I was waching SUP wave videos form others (in the early days) I saw that they need to palle like crazy to get flying, get flying late, wenh the wave is already steep, then race down the slope and get far in front of the wave. In addition, I wanted to be as agile (tight curves) as with my kite-foil\n\n\nMy design conditions therefore have been:\n\n\n\n\nkeep the width at 70cm only (today typical SUP foils use 90cm or even larger!)\n\n\nget to fly at ~12km/h to catch the wave early before it gest to steep\n\n\nlimit the max velocity via slef-limitation\n\n\n\n\nall in all, using a low aspect ratio (large chord relative to given spanwidth) and generating massive induced drag did the job and I'm quite pleased with the result.\n\n\n\n\nThe basic scripts\n\n\nI provide my scripts at \ngithub\n.\nThe folder \nscripts\n contains wingLib.py, the library holding the basic worker routines and 2D airfoil data\n\n\n\n\n\n\n\n\nFolder\n\n\nName\n\n\nComment\n\n\n\n\n\n\n\n\n\n\nscripts\n\n\nwingLib.py\n\n\nbasic worker routines to e.g. get from 2D points to 3D surfaces\n\n\n\n\n\n\nscripts\n\n\nafData_xy.py\n\n\n2D airfoil data for profile \nxy\n\n\n\n\n\n\nplanes/basicWing\n\n\nbasicWing.blend\n\n\nthe blender file for the basic wing example\n\n\n\n\n\n\nplanes/basicWing\n\n\nellipticPlaneWing.py\n\n\nthe python script used in the basicWing.blend file to generate a planar wing with elliptic chord\n\n\n\n\n\n\n\n\nI currently include the \nh105\n profile, which I (and many others) use for hydrofoils.\nThis will be extended bit by bit according to my needs.\nFeel free to add your own profile data and send me a pull request.\nIf you are looking for a specific dataset, check out \nUIUC Airfoil Database\n.\n\n\nGetting started\n\n\n\n\nWhat we'll be doing:\n\n\n\n\nTake a set of points for a  2d profile (in this case the h105)\n\n\nDetermine the position of the leading edge according to a parametrized curve (to achieve the seewp back of the wing tip region)\n\n\nDetermine the chordlength along the span according to an elliptic curve\n\n\nScale and place the 2D points and fit a curve through them (we then have a set of 2D profile curves placed in 3d as wing sections)\n\n\nFit a surface through all the curves \n\n\n\n\nThis gives us the 3D wing\n\n\n\n\nwhich could then be used for generating CAM paths using blenderCam.\n\n\n\n\nOpen blender's scripting workspace\n\n\nOnce you have blender up and running, clone the \nblenderCadCamTools\n.\n\nStart blender and open the basicWing.blend file.\n\nThe reult should look like: \n\n\n\nIf not, check to be on the \nscripting workspace\n - you can select the different workspace in the top menu to the right of the standard menue (File, ...).\nYou will most probaly end-up switching between \nModeling\n and \nScripting\n.\n\n\nIn the \nScripting\n workspace, the script \nellipticPlaneWing.py\n from the repo (stored right next to the blend file) should be open.\n\nIf not, click the symbol which looks like a folder (second from right), browse to where you cloned the repo to and open planes/basicWing/ellipticPlaneWing.py \n\n\n\n\nScripting tools\n\n\nOn the left side, you have the\n\n\n\n\nusual modeling wintow (top)\n\n\npython console (middle) where you can enter python commands\n\n\npython commands blender uses when you model (using the mouse and user interface). This is quite helful, as you can copy paste the commands over to your scripts  \n\n\n\n\nNow click in the modeling window (top left) and hit \nn\n to pu-up the \nitem transform dialogue\n which shows the location properties of the selected object (the wing). \n\n\n\n\nIn the field for \nLocation Y\n enter \n0\n and hit enter.\nThe script output window (left bottom shows the python api used to set the Y location).\n\n\nSelect via left-click (blue), right-click>copy and paste in the python console (left middle).\n\nChange '= 0' to e.g. \n= 0.042\n and hit enter.\n\nThe wing now moved to that position:\n\n\nThis is what we use at the end of the script (line 99) to place the wing at the origin (previous figure on the right).\n\nTake home\n: what you can model can be scripted. Just open the scripting workspace and have a look at the api command output.\n\n\nThe ellipticPlaneWing.py script\n\n\nThe first few lines import necessary libraries, then extend the path to include the blenderCadCam scripts directory.\nLine 10 uses a relative path (relative to the current blend file). If you cloned the repo, the scripts directory is 2 dirs up from basicWing.blend.\n\n\nLine 28 & 29 then imports / reloads the winLib (the reload is necessary in case the file changed during the blender session).\n\nLine 31/32 imports the h105 2d profile.\n\n\nConfigure the if clause line 43 to \n1\n, 50 and 94 to \n0\n\n\n\nHit \nrun script\n (upper right of the script window). Noe the wing should have been disappeared. The deleteAll() helper routine in fact deletes all except the camera and lamp.\n\n\nConfigure the if clause line 43 AND 50 to \n1\n, 94 to \n0\n. Run the script.\n\nYou should now have a set of 2D profiles, named \n2dsection_x\n.\n\n\nThis is the result of executing steps 1.) to 4.) from \nsome\n\n\nConfigure the if clause line 43, 50 AND 94 to \n1\n. Run the script. This should give you the result of step 5: a surface fitted through the 2d curves.\n\n\nRead through the scripts, it should be pretty obvious.\nAn important hint: the sufaces need to be closed, otherwize you will get weird errors later on (mainly when using boolean intersections for designing moulds etc.). This is done in two places:\n\n\n\n\nEach of the 2D curves are closed (in placeSectionsMinLimited calling curveBezierFromPoints(hCoord,name,True) True=closed curve)\n\n\nIn bridgeListOfEdgeLoopsCloseOuterWithFace (as the name states: outer edge loop is closed with face))\n\n\n\n\nGetting there took me quite some time fiddling around. It's like always: once you have it, it looks straight forward.\n\nYou can now imagine how to generate bend-up wing tips etc. Either use the usual modeling tools of blender to do it once. Alternatively, define a function and adapt z location and y rotation of the individual sections before fitting the surface.\n\n\nMoulds can now be designed by subtracting the wing from cubes etc. Play a bit with the modeling interface, have a look at the api command output and start designing your own scripts.",
            "title": "Basic python scripting 4 airfoils"
        },
        {
            "location": "/blenderAirfoils/#why-script-based-modelling",
            "text": "I like script based, parametric modelling, because I can 'replay' complex design sequences with adapted parameters.  Examples are my kite-hydrofoil and SUP hydrofoil front and rear wings, which follow the same design approach, with the rear wing being a smaller version of the front wing and the SUP/Wave front wing (I call it  monster ) having a 3 x chordlength.  Kite-foil    Sup/Wave foil  monster  wing  Wonder why it look that way? Pretty easy: I use it with kite and with my SUP (withe paddle) in waves.\nWhen I was waching SUP wave videos form others (in the early days) I saw that they need to palle like crazy to get flying, get flying late, wenh the wave is already steep, then race down the slope and get far in front of the wave. In addition, I wanted to be as agile (tight curves) as with my kite-foil  My design conditions therefore have been:   keep the width at 70cm only (today typical SUP foils use 90cm or even larger!)  get to fly at ~12km/h to catch the wave early before it gest to steep  limit the max velocity via slef-limitation   all in all, using a low aspect ratio (large chord relative to given spanwidth) and generating massive induced drag did the job and I'm quite pleased with the result.",
            "title": "Why script based modelling"
        },
        {
            "location": "/blenderAirfoils/#the-basic-scripts",
            "text": "I provide my scripts at  github .\nThe folder  scripts  contains wingLib.py, the library holding the basic worker routines and 2D airfoil data     Folder  Name  Comment      scripts  wingLib.py  basic worker routines to e.g. get from 2D points to 3D surfaces    scripts  afData_xy.py  2D airfoil data for profile  xy    planes/basicWing  basicWing.blend  the blender file for the basic wing example    planes/basicWing  ellipticPlaneWing.py  the python script used in the basicWing.blend file to generate a planar wing with elliptic chord     I currently include the  h105  profile, which I (and many others) use for hydrofoils.\nThis will be extended bit by bit according to my needs.\nFeel free to add your own profile data and send me a pull request.\nIf you are looking for a specific dataset, check out  UIUC Airfoil Database .",
            "title": "The basic scripts"
        },
        {
            "location": "/blenderAirfoils/#getting-started",
            "text": "What we'll be doing:   Take a set of points for a  2d profile (in this case the h105)  Determine the position of the leading edge according to a parametrized curve (to achieve the seewp back of the wing tip region)  Determine the chordlength along the span according to an elliptic curve  Scale and place the 2D points and fit a curve through them (we then have a set of 2D profile curves placed in 3d as wing sections)  Fit a surface through all the curves    This gives us the 3D wing   which could then be used for generating CAM paths using blenderCam.   Open blender's scripting workspace  Once you have blender up and running, clone the  blenderCadCamTools . Start blender and open the basicWing.blend file. \nThe reult should look like:   If not, check to be on the  scripting workspace  - you can select the different workspace in the top menu to the right of the standard menue (File, ...).\nYou will most probaly end-up switching between  Modeling  and  Scripting .  In the  Scripting  workspace, the script  ellipticPlaneWing.py  from the repo (stored right next to the blend file) should be open. If not, click the symbol which looks like a folder (second from right), browse to where you cloned the repo to and open planes/basicWing/ellipticPlaneWing.py",
            "title": "Getting started"
        },
        {
            "location": "/blenderAirfoils/#scripting-tools",
            "text": "On the left side, you have the   usual modeling wintow (top)  python console (middle) where you can enter python commands  python commands blender uses when you model (using the mouse and user interface). This is quite helful, as you can copy paste the commands over to your scripts     Now click in the modeling window (top left) and hit  n  to pu-up the  item transform dialogue  which shows the location properties of the selected object (the wing).    In the field for  Location Y  enter  0  and hit enter.\nThe script output window (left bottom shows the python api used to set the Y location). \nSelect via left-click (blue), right-click>copy and paste in the python console (left middle). Change '= 0' to e.g.  = 0.042  and hit enter. The wing now moved to that position: \nThis is what we use at the end of the script (line 99) to place the wing at the origin (previous figure on the right). Take home : what you can model can be scripted. Just open the scripting workspace and have a look at the api command output.",
            "title": "Scripting tools"
        },
        {
            "location": "/blenderAirfoils/#the-ellipticplanewingpy-script",
            "text": "The first few lines import necessary libraries, then extend the path to include the blenderCadCam scripts directory.\nLine 10 uses a relative path (relative to the current blend file). If you cloned the repo, the scripts directory is 2 dirs up from basicWing.blend. \nLine 28 & 29 then imports / reloads the winLib (the reload is necessary in case the file changed during the blender session). Line 31/32 imports the h105 2d profile.  Configure the if clause line 43 to  1 , 50 and 94 to  0  \nHit  run script  (upper right of the script window). Noe the wing should have been disappeared. The deleteAll() helper routine in fact deletes all except the camera and lamp.  Configure the if clause line 43 AND 50 to  1 , 94 to  0 . Run the script. You should now have a set of 2D profiles, named  2dsection_x . \nThis is the result of executing steps 1.) to 4.) from  some  Configure the if clause line 43, 50 AND 94 to  1 . Run the script. This should give you the result of step 5: a surface fitted through the 2d curves.  Read through the scripts, it should be pretty obvious.\nAn important hint: the sufaces need to be closed, otherwize you will get weird errors later on (mainly when using boolean intersections for designing moulds etc.). This is done in two places:   Each of the 2D curves are closed (in placeSectionsMinLimited calling curveBezierFromPoints(hCoord,name,True) True=closed curve)  In bridgeListOfEdgeLoopsCloseOuterWithFace (as the name states: outer edge loop is closed with face))   Getting there took me quite some time fiddling around. It's like always: once you have it, it looks straight forward. You can now imagine how to generate bend-up wing tips etc. Either use the usual modeling tools of blender to do it once. Alternatively, define a function and adapt z location and y rotation of the individual sections before fitting the surface.  Moulds can now be designed by subtracting the wing from cubes etc. Play a bit with the modeling interface, have a look at the api command output and start designing your own scripts.",
            "title": "The ellipticPlaneWing.py script"
        }
    ]
}